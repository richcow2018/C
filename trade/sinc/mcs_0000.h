/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/*                  SCD     共通ヘッダファイル                        */
/*                                                                    */
/*                    Copyright   1994, 2 NTT-DATA Communications Co. */
/**********************************************************************/
/******************************************* tabstop=4 ****************/
/**********************************************************************/
/* 修正                                                               */
/* (1) 1996,03,26 根本　ST4234                                    S01 */
/*         ｺﾝﾊﾟｲﾙ時のwarning出力を免れるために，MCS_TDEQﾏｸﾛを修正     */
/* (2) 1996,09,11 米倉　SSCY0181                                  S02 */
/*         MCS_NVTPS,MCS_NXTQの追加                                   */
/* (3) 1996.10.11 米倉　ST4577                                    S03 */
/*         ﾜｰﾆﾝｸﾞ対策で、MCS_HDEQ,MCS_TDEQを修正                      */
/**********************************************************************/
/***********************   構造体宣言    ******************************/
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/


/**********************************************************************/
/*                    ﾊﾟﾗﾒﾀﾘｽﾄｴﾚﾒﾝﾄ構造体                             */
/**********************************************************************/
typedef struct {
    long flag;
    long v1;
    long v2;
} MCS_PRM;

/**********************************************************************/
/*                   ﾃｰﾌﾞﾙ名ﾘｽﾄｴﾚﾒﾝﾄ構造体                            */
/**********************************************************************/
typedef struct {
    char tname[8];
} MCS_TNML;

/**********************************************************************/
/*                  関数ｱﾄﾞﾚｽﾘｽﾄｴﾚﾒﾝﾄ構造体                           */
/**********************************************************************/
typedef struct {
    long (*func)();
} MCS_FLIST;

/**********************************************************************/
/*                  配下ﾓｼﾞｭｰﾙ構造体(ｻﾌﾞ ｺﾝﾄﾛｰﾗ)   		              */
/**********************************************************************/
typedef struct {
	long	mdentry;
	struct {
	char	ircode;
	char	subcode;
	char	dumy[2];
	long	(* func)();
	} fset[9];
} MCS_FUNC;

/**********************************************************************/
/*					ﾒｯｾｰｼﾞﾘｽﾄｴﾚﾒﾝﾄ構造体							  */
/**********************************************************************/
typedef struct {
	char	*msgid;
	char	*comform;
	char	*addform;
} MCS_MLIST;

/**********************************************************************/
/*                  ｽｹｼﾞｭｰﾗ変数定義域構造体                           */
/**********************************************************************/
typedef struct {
    long        tnum;           /* 参照外部ﾃｰﾌﾞﾙ数                    */
    MCS_TNML    *tnmlist;       /* 参照外部ﾃｰﾌﾞﾙ名ﾘｽﾄﾎﾟｲﾝﾀ            */
	long		*tblp;			/* 参照外部ﾃｰﾌﾞﾙﾎﾟｲﾝﾀﾘｽﾄ              */
	long		pfrmnm;			/* ﾌﾟﾛｾｽ起動ﾊﾟﾗﾒﾀ数                   */
    char    	*pform;         /* ﾌﾟﾛｾｽ起動ﾊﾟﾗﾒﾀ書式ﾎﾟｲﾝﾀ            */
    char	    *cform;         /* 'call'ｺﾏﾝﾄﾞﾊﾟﾗﾒﾀ書式ﾎﾟｲﾝﾀ          */
    long        (*irbifunc)();  /* IRB数決定付加ﾙｰﾁﾝﾎﾟｲﾝﾀ             */
    long        (*msghfunc)();  /* ﾒｯｾｰｼﾞﾊﾝﾄﾞﾗ付加ﾙｰﾁﾝﾎﾟｲﾝﾀ           */
    long        (*mdtlfunc)();  /* ﾓﾆﾀﾃﾞｰﾀ長算出付加ﾙｰﾁﾝﾎﾟｲﾝﾀ         */
    long        (*smonfunc)();  /* ｽﾎﾟｯﾄﾓﾆﾀ付加ﾙｰﾁﾝﾎﾟｲﾝﾀ              */
    long        (*smplfunc)();  /* ﾓﾆﾀｻﾝﾌﾟﾘﾝｸﾞ付加ﾙｰﾁﾝﾎﾟｲﾝﾀ           */
    long        (*termfunc)();  /* ﾌﾟﾛｾｽ終了指示付加ﾙｰﾁﾝﾎﾟｲﾝﾀ         */
    long        mnum;           /* ﾓｼﾞｭｰﾙ数                           */
    MCS_FLIST   *initlp;        /* ﾓｼﾞｭｰﾙ初期化関数ﾘｽﾄﾎﾟｲﾝﾀ           */
    MCS_FLIST   *distlp;        /* ﾓｼﾞｭｰﾙ処理ﾙｰﾁﾝﾘｽﾄﾎﾟｲﾝﾀ             */
	MCS_PRM     *pprmp;			/* 起動ﾊﾟﾗﾒﾀﾘｽﾄﾎﾟｲﾝﾀ				  */
	MCS_PRM		*cprmp;			/* 'call'ｺﾏﾝﾄﾞﾘｽﾄﾎﾟｲﾝﾀ				  */
	long		nvtsiz;			/* NVTｻｲｽﾞ							  */
	long		saasiz;			/* SAAｻｲｽﾞ							  */
	MCS_FUNC	*subfunc;       /* 配下ﾓｼﾞｭｰﾙ呼出しﾘｽﾄﾎﾟｲﾝﾀ			  */
	long		msgnum;			/* ﾒｯｾｰｼﾞﾘｽﾄ配列数                    */
	MCS_MLIST	*msglist;		/* ﾒｯｾｰｼﾞﾘｽﾄﾎﾟｲﾝﾀ					  */
	long		pbmx;           /* PBﾕﾆｯﾄｻｲｽﾞ制約値(ROS) '92.6.12(M02)*/
	long		rcvmssw;		/* ﾒｯｾｼﾞ受信方法 0:osrcvmspr/>0:..msr */
	char		itbreg;			/* 内部ﾃｰﾌﾞﾙﾒﾓﾘ領域指定               */
								/* 0:LMﾌﾟｰﾙﾊﾞｯﾌｧ/1:LM共用ﾒﾓﾘ          */
	char		cmorlm;         /* osrcvmsrの場合の受信ﾊﾞｯﾌｧ種別      */
								/* 0:CMﾌﾟｰﾙﾊﾞｯﾌｧ/1:LMﾌﾟｰﾙﾊﾞｯﾌｧ        */
	char		dummy1;         /* 予備                               */
	char		dummy2;         /* 予備                               */
} MCS_SDEF;



/**********************************************************************/
/*                  IRB (Internal Request Block)                      */
/*                  マスタ(汎用)　フォーマット                        */
/**********************************************************************/
typedef struct mcsirb MCSIRB;
struct mcsirb {
	MCSIRB	*qlink[2];				/* Queue Link              */
	unsigned char	btyp;			/* Block Type              */
	unsigned char	gmid;			/* Geting Module ID        */
	unsigned char	dmid;			/* Destination Module ID   */
	unsigned char	omid;			/* Origin Module ID        */
	unsigned char	ircode;			/* IR Code                 */
	unsigned char	subcode;        /* サブＩＲコード          */
	short	tcode;					/* Termination code        */
	long	*ctxtp;					/* Context Pointer         */
	long	result;					/* システムコールのリザルト*/
	long	option;					/* 任意設定値              */
	long	rd;						/* リクエスト識別子        */
	long	data[8];				/* Variable Area           */
} ;

/**********************************************************************/
/*                  IRB (Internal Request Block)                      */
/*                   一般   タイマ　エレメント                        */
/**********************************************************************/
struct	mcstmel {
	long	dmy1[5];	/*ダミー（ＩＲＢ共通部相当）　　   */
	long	inttime;	/*インタバルタイマ値　　　　　　　 */
	long	parm[10];	/*パラメタ格納域　　　　　　　　　 */
};
typedef	struct mcstmel MCSTMEL;


/**********************************************************************/
/*                  IRB (Internal Request Block)                      */
/*               バッファリトライ  タイマ　エレメント                 */
/**********************************************************************/
struct	mcsbrty {
	long	dmy1[5];	/*ダミー（ＩＲＢ共通部相当）　　   */
	long	inttime;	/*インタバルタイマ値　　　　　　　 */
	long	reqmid;		/*要求元ﾓｼﾞｭｰﾙID　　　　　         */
	long	trycnt;		/*ﾘﾄﾗｲｶｳﾝﾀ　　　　　　　　　　　　 */
	long	bftype;		/*要求ﾊﾞｯﾌｧﾀｲﾌﾟ 　　　　　　　　　 */
	long	bfleng;		/*要求ﾊﾞｯﾌｧ長   　　　　　　　　　 */
	void	(*funcpt)();/*出口関数ﾎﾟｲﾝﾀ　　　　　　　      */
	long	dummy0;		/*予備         　　　　　　　　　  */
	long	*lkctxt;	/*ﾛｯｸしたｺﾝﾃｷｽﾄﾎﾟｲﾝﾀ　  　　　　　 */
	long	dummy1;		/*予備         　　　　　　　　　  */
	long	dummy2;		/*予備         　　　　　　　　　  */
	long	dummy3;		/*予備         　　　　　　　　　  */
};
typedef	struct mcsbrty MCSBRTY;


/**********************************************************************/
/*                  IRB (Internal Request Block)                      */
/*                     モニタ要求　個別部　                           */
/**********************************************************************/
struct 	mcsmnt {
	long	dmy1[5];		/*ダミー（ＩＲＢ共通部相当）      */
	long    rcvml;			/*受信電文長                      */
	char   *rcvmp;			/*受信電文ポインタ                */
	MCS_PRM   *prmp;        /*パラメタ展開域ポインタ          */
	long	yob4;			/*予備　　                        */
	unsigned short strt;	/*開始時刻			  */
	unsigned short stpt;    /*停止時刻			  */
	char    *filep;			/*出力ファイル名ポインタ　　　    */
};
typedef struct mcsmnt MCSMNT ;


/**********************************************************************/
/*                  IRB (Internal Request Block)                      */
/*                     モニタ停止　個別部　                           */
/**********************************************************************/
struct 	mcsmstp {
	long	dmy1[5];		/*ダミー（ＩＲＢ共通部相当）      */
	long    rcvml;			/*受信電文長                      */
	char   *rcvmp;			/*受信電文ポインタ                */
	unsigned char result;	/*終了状態  0:正常  1:異常        */
	unsigned char cause;    /*終了要因  0:正常  1:強制  2:異常*/
							/*			3:起動不可            */
	short   sysid;      	/*システムコールＩＤ              */
	long 	sysrcd;			/*システムコール返却値            */
};
typedef struct mcsmstp MCSMSTP ;


/**********************************************************************/
/*                  IRB (Internal Request Block)                      */
/*                      スポットモニタ要求                            */
/**********************************************************************/
struct mcsspmn {
	long    dmy1[5];    /*ダミー（ＩＲＢ共通部相当）      */
	long    rcvml;      /*受信電文長                      */
	char   *rcvmp;      /*受信電文ポインタ				  */
	MCS_PRM   *prmp;    /*パラメタ展開域ポインタ          */
	long    yob2[3];    /*予備                            */
	long    fd;         /*出力ファイル記述子              */
};
typedef struct mcsspmn MCSSPOT;


/**********************************************************************/
/*                  IRB (Internal Request Block)                      */
/*                    osrcvmspr/osrcvmsr(完了)                        */
/**********************************************************************/
typedef struct mcsmgrv {
	long	dmy1[5];	/*ダミー（ＩＲＢ共通部相当）　    */
	long	rcvml;      /*受信電文長					  */
	char   *rcvmp;		/*受信電文ポインタ				  */
	long    rd;			/*ｒｄ値						  */
} MCSMGRV;


/**********************************************************************/
/*                  IRB (Internal Request Block)                      */
/*                    強制閉塞依頼（完了）                            */
/**********************************************************************/
typedef struct mcsterm {
	long	dmy1[5];    /*ダミー（ＩＲＢ共通部相当）	  */
	short   dmy2;       /*								  */
	short   cause;      /* 動機	0:ＯＣＰからのプロセス終了依頼*/
} MCSPTERM;


/**********************************************************************/
/*                 コンテキスト内のスケジューラ管理域                 */
/**********************************************************************/
typedef	struct {
	char	ctxtlock;				/*ｺﾝﾃｷｽﾄ ﾛｯｸ ﾌﾗｸﾞ           */
									/*ﾛｯｸ中=1,ｱﾝﾛｯｸ中=0         */
	char   	dmy1[3];
	MCSIRB  *retryqt[2];			/*バッファリトライ待ちキュー*/
} MCSSWD;


/**********************************************************************/
/*               IRA (IRB Management Area)                            */
/**********************************************************************/
typedef struct{
	short			fixno;		/* Fixed IRB Number                   */
	short			dmy1;		/*                                    */
	short			entovl;		/* Overload Condition Entry Number    */
	short			extovl;		/* Overload Condition Exit Number     */
	short			getno;		/* Goten IRB Number                   */
	unsigned char	is;			/* IRA Status                         */
	char			dmy2;		/*                                    */
	MCSIRB	        *irbtop;	/* Top of IRB Address                 */
	long			dmy3[2];	/*                                    */
	MCSIRB	        *freeqt[2];	/* Free IRB QT                        */
} MCSIRA;


/**********************************************************************/
/*                        RDV (RD Vector)                             */
/**********************************************************************/
typedef union{
	MCSIRB	*irbp[65536];			/* IRB Pointer ([1]-[65535] Only) */
	unsigned short	word[131072];	/* RD Maximum Value ([0] Only)    */
} MCSRDV;


/**********************************************************************/
/*                        ELA (error log area)                        */
/**********************************************************************/
#define MCSELMAX 127
typedef struct {
	long 	dmy1;                  /* 					   		 */
	long	logno;				   /* エラーログカウンタ		 */
	struct {
		long code1;
		long code2;
		long data1;
		long data2;
	} log[MCSELMAX];
}	MCSELA;


/**********************************************************************/
/*                    SAA (System Appraisement  Aide)                 */
/**********************************************************************/
typedef struct{
	unsigned char outdsp;			/*出力先表示　                    */
									/*   0:コンソール出力             */
									/*   1:ファイル出力               */
	unsigned char yob1[3];			/* 予備                           */
	long	outfd;	    			/* 出力ファイル記述子	          */
	unsigned short mntint;			/* モニタ間隔		              */
	unsigned short yob2;			/* 予備			                  */
	char	*rcvmsp;				/* 受信電文ポインタ	              */
	char	*edbuf;					/* ﾓﾆﾀﾚｺｰﾄﾞ編集ﾊﾞｯﾌｧﾎﾟｲﾝﾀ         */
	long	rlen;					/* 編集バッファ長　　　　　       */
	char	*wrtp;					/* 出力ﾌｧｲﾙ次書きこみﾎﾟｲﾝﾀ        */
	long	*smptp;					/* ｻﾝﾌﾟﾘﾝｸﾞﾀｲﾏｴﾚﾒﾝﾄｱﾄﾞﾚｽ          */
	long	*stptp;					/* ｻﾝﾌﾟﾘﾝｸﾞ停止ﾀｲﾏｴﾚﾒﾝﾄｱﾄﾞﾚｽ      */
	long	sclass;					/* ｼｽﾃﾑｺｰﾙ種別（ｴﾗｰ発生時）       */
	long	srtncd;					/* ｼｽﾃﾑｺｰﾙ返却値（同上）          */
	long	bfrty;					/* バッファリトライ発生回数       */
} MCSSAA;


/**********************************************************************/
/*           NVT (Node Vector)   ｽｹｼﾞｭｰﾗ固定部                        */
/**********************************************************************/
typedef struct{
	char	areaid[4];					/* "NVT\0"                    */
	char	pname[8];					/* Proccess Name              */
	long	dmy1;						/*                            */
	long	mbid;						/* Mail Box ID                */
	unsigned char	ps;					/* Proccess Status            */
	unsigned char	rmid;				/* Running Module ID          */
	short 	dmy2;						/*                            */
	long	*crctxp;            		/*カレントコンテキストポインタ*/
	MCSIRB	*waitqt[2];					/* Scheduler Wait QT          */
	MCSIRB	*timeqt[2];					/* タイマエレメント　キュー   */
	MCSRDV	*rdvp;						/* RDV Pointer                */
	MCSIRA	*irap;						/* IRA Pointer                */
	MCSELA	*elap;						/* ELA Pointer                */
	MCSSAA	*saap;						/* SAA Pointer                */
	long 	sttmrd;						/*osstimのＲＤ                */
	long	brtytim;					/* ﾊﾞｯﾌｧﾘﾄﾗｲﾀｲﾏ				  */
	long	brtylmt;					/* ﾊﾞｯﾌｧﾘﾄﾗｲ回数			  */
	long	dmy3[6];
} MCSNVT;

/**********************************************************************/
/*              IRB数決定付加ﾙｰﾁﾝ　IRBINF構造体                       */
/**********************************************************************/
typedef struct{
	short	irbsu;
	short	dmy;
	short	kafuka;
	short	kaijo;
} MCS_IRBINF;

/**********************************************************************/
/*                 ﾌﾟﾚﾌｨｸｽ　　　　　　　　　                          */
/**********************************************************************/
extern MCSNVT *mcsprefix;



/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/***********************   値　　宣言    ******************************/
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/



/**********************************************************************/
/*                       モジュール　ＩＤ　       	                  */
/**********************************************************************/
#define MCS_SCD  0


/**********************************************************************/
/*                  ブロックタイプ(IRB ﾌｫｰﾏｯﾄ)                        */
/**********************************************************************/
#define	IRBFIX	0x00			/*固定ＩＲＢ    (00000000) */
#define	IRBEXP	0x80 			/*拡張ＩＲＢ    (10000000) */
#define	TYPN	0x00 			/*タイプＮ      (00000000) */
#define	TYPR	0x02 			/*タイプＲ      (00000010) */
#define	TYPE	0x04 			/*タイプＥ      (00000100) */
#define	RQFLG	0x00 			/*要求フラグ    (00000000) */
#define	CPFLG	0x01 			/*完了フラグ    (00000001) */
#define	CPFLGOFF	0xfe 		/*完了フラグmask(11111110) */


/**********************************************************************/
/*                    ＩＲコード(スケジューラ使用値）                 */
/**********************************************************************/
#define MCSSTTM   	0x00    	/* ossttim 完了　　　　　 */
#define MCSTIME	  	0x01		/* タイマエレメント    	  */
#define MCSEND    	0x02       	/* プロセス終了要求　 　  */
#define MCSSPMN		0x05       	/* スポットモニタ要求　　 */
#define MCSTERM     0x06        /* 強制閉塞依頼／完了     */
#define MCSAPCMD    0x07        /* osrcvmspr完了(ﾒｯｾｰｼﾞﾊﾝﾄﾞﾗ) */


/**********************************************************************/
/*                 サブＩＲコード（スケジューラ使用値）　             */
/**********************************************************************/
#define MCSBUFF	  	0x01	   	/* バッファ　リトライ  　  */
#define MCSSAMPL  	0x04	   	/* モニタサンプリング　  　*/
#define MCSSTOP    	0x05	   	/* モニタサンプリング停止　*/


/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/*******************	共通マクロ定義　　*****************************/
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

								
/**********************************************************************/
/*	アボート関数を呼出すマクロ（ACEでのmr_sabt拡張対応）              */
/*	p1 = ﾓｼﾞｭｰﾙID                                                     */
/*  p2 = 詳細コード      :下１バイトのみ有効　                        */
/*  p3 = 他関数の返却値等:下３バイトのみ有効　                        */
/*  p4 = 他関数の返却値等                                             */
/**********************************************************************/
#define MCS_ABEX(p1,p2,p3,p4) mc_logv(0x00ff822f,4, \
				(((p1)>>16)) & 0x0000ffff, \
		        (((unsigned long)p2)<<24) | (p3 & 0x00ffffff), \
				(p1) & 0x0000ffff , \
				p4); \
		mr_sabt((((p1)>>16)) & 0x0000ffff, \
		        (((unsigned long)p2)<<24) | (p3 & 0x00ffffff), \
				(p1) & 0x0000ffff , \
				p4)

/**********************************************************************/
/*	アボート関数を呼出すマクロ（旧NTCﾌﾟﾛ互換用）                      */
/*	p1 = アボートコード　:下２バイトのみ有効　                        */
/*  p2 = 詳細コード      :下１バイトのみ有効　                        */
/*  p3 = 他関数の返却値  :下３バイトのみ有効　                        */
/**********************************************************************/
#define MCS_ABT(p1,p2,p3) mc_logv(0x00ff822e,2,(unsigned short)p1, \
		((unsigned long)p2)<<24 | (p3 & 0x00ffffff)); \
		mr_sabt((unsigned short)p1, \
				((unsigned long)p2)<<24 | (p3 & 0x00ffffff),0,0)
								 
/**********************************************************************/
/*	ＮＶＴ個別部先頭アドレス設定マクロ                                */
/*  S02:1996.9.11 米倉 新規追加                                       */
/**********************************************************************/
#define MCS_NVTPS ((long)(mcsprefix)+(long)(sizeof(MCSNVT)))
								 
/**********************************************************************/
/*  ＩＲＢ操作マクロ 1                                                */
/*  処理：ＩＲＢをキューターミナルの最後尾にエンキューする            */
/*  引数： p1 =    ｷｭｰﾀｰﾐﾅﾙﾎﾟｲﾝﾀ       p2 = IRBﾎﾟｲﾝﾀ                  */
/**********************************************************************/
#define MCS_TENQ(p1,p2) {((MCSIRB *)p2) -> qlink[0] = (MCSIRB *)p1 ;\
                        ((MCSIRB *)p2) -> qlink[1] = \
					((MCSIRB *)p1) -> qlink[1];\
			((MCSIRB *)p2) -> qlink[1] -> qlink[0] = \
					(MCSIRB *)p2 ;\
			((MCSIRB *)p1) -> qlink[1] = (MCSIRB *)p2;}

/**********************************************************************/
/*  ＩＲＢ操作マクロ 2                                                */
/*  処理：キューターミナル先頭のＩＲＢをデキューし、ＩＲＢ            */
/*        ポインタをｐ２に設定する                                    */
/*  引数： p1 =    ｷｭｰﾀｰﾐﾅﾙﾎﾟｲﾝﾀ       p2 = IRBﾎﾟｲﾝﾀ                  */
/*        修正 ST4577 void でｷｬｽﾄする                			  S03 */
/*                    (MCS_HDEQ使用者のｺﾝﾊﾟｲﾙでwarningが出るため) S03 */
/**********************************************************************/
#define MCS_HDEQ(p1,p2) {(p2) = (void *)(((MCSIRB *)p1) -> qlink[0]) ; \
						MCS_ADEQ(p2)}


/**********************************************************************/
/*  ＩＲＢ操作マクロ 3                                                */
/*  処理：任意のＩＲＢをデキューする                                  */
/*  引数： p1 =  IRBﾎﾟｲﾝﾀ                                             */
/**********************************************************************/
#define MCS_ADEQ(p1) {((MCSIRB *)p1) -> qlink[0] -> qlink[1] \
                                = ((MCSIRB *)p1) -> qlink[1] ;\
                     ((MCSIRB *)p1) -> qlink[1] -> qlink[0] \
                                = ((MCSIRB *)p1) -> qlink[0];\
    		     ((MCSIRB *)p1) -> qlink[0] = (MCSIRB *)0;\
		     ((MCSIRB *)p1) -> qlink[1] = (MCSIRB *)0;}
					
/**********************************************************************/
/*  ＩＲＢ操作マクロ 4                                                */
/*  処理：指定されたモジュールに対し、依頼／通知ＩＲＢを              */
/*		出力する　　                                    　            */
/*  引数： p1 = ＩＲＢポインタ　                                      */
/*         p2 = ＩＲコード　　                                        */
/*		   p3 = サブＩＲコード							              */
/*		   p4 = 出力先モジュールＩＤ　　　　　　　　　　　            */
/*		   p5 = コンテキストポインタ　　　　　　　　　　　            */
/**********************************************************************/
#define MCS_IREQ(p1,p2,p3,p4,p5) \
		  { ((MCSIRB *)p1)->ircode = p2 ; \
			((MCSIRB *)p1)->subcode = p3 ; \
		    ((MCSIRB *)p1)->dmid = p4 ; \
		    ((MCSIRB *)p1)->ctxtp = (long *)p5 ; \
                    ((MCSIRB *)p1)->omid = mcsprefix->rmid ;\
					((MCSIRB *)p1)->btyp &= CPFLGOFF ; \
                    MCS_TENQ (mcsprefix->waitqt,p1); }  


/**********************************************************************/
/*  ＩＲＢ操作マクロ 5									              */
/*  処理：指定されたモジュールに対し、完了ＩＲＢを出力する            */
/*  引数： p1 = ＩＲＢポインタ						            	  */
/*         p2 = 完了コード				            				  */
/*		 p3 = 出力先モジュールＩＤ				            		  */
/*		 p4 = コンテキストポインタ						              */
/**********************************************************************/
#define MCS_IRSP(p1,p2,p3,p4) \
		  { ((MCSIRB *)p1)->tcode =  p2 ; \
			((MCSIRB *)p1)->dmid = p3 ; \
			((MCSIRB *)p1)->ctxtp = (long *)p4 ; \
					((MCSIRB *)p1)->omid = mcsprefix->rmid ; \
					((MCSIRB *)p1)->btyp |= CPFLG ; \
					MCS_TENQ (mcsprefix->waitqt,p1); }


/**********************************************************************/
/*  ＩＲＢ操作マクロ 6                                                */
/*  処理：システムコールＩＲＢをＲＤＶに登録する　　　　　　          */
/*  引数： p1 = ＩＲＢポインタ　                                      */
/*         p2 = ＩＲコード　　                                        */
/*		   p3 = サブＩＲコード　	　　　　　　　　　　　            */
/*		   p4 = 出力先モジュールＩＤ　　　　　　　　　　　            */
/* 		   p5 = コンテキストポインタ　　 	　　　　　  　            */
/*	       p6 = ｒｄ　　　　　　　　　　　　　　　　　	　            */
/**********************************************************************/
#define MCS_SETRD(p1,p2,p3,p4,p5,p6) \
		  { ((MCSIRB *)p1)->ircode = p2 ; \
		    ((MCSIRB *)p1)->subcode = p3 ; \
		    ((MCSIRB *)p1)->dmid = p4 ; \
	      	((MCSIRB *)p1)->ctxtp = (long *)p5 ; \
			((MCSIRB *)p1)->rd = p6 ; \
                            ((MCSIRB *)p1)->omid = mcsprefix->rmid ;\
                            mcsprefix->rdvp->irbp[p6] =(MCSIRB *)p1;}  


/**********************************************************************/
/*  ＩＲＢ操作マクロ 7									              */
/*  処理：キューターミナルを初期化する	             			  	  */
/*  引数： p1 = ｷｭｰﾀｰﾐﾅﾙﾎﾟｲﾝﾀ						             	  */
/**********************************************************************/
#define MCS_QINIT(p1) {((MCSIRB *)p1)->qlink[0] = (MCSIRB *)p1 ; \
					   ((MCSIRB *)p1)->qlink[1] = (MCSIRB *)p1 ;}


/**********************************************************************/
/*  ＩＲＢ操作マクロ 8                                                */
/*  処理：処理待ちのＩＲＢの存在を判定する　　　                      */
/*        存在しない場合、マクロ式の値は真　　            　　　　　　*/
/*  引数： p1 = NVTｷｭｰﾀｰﾐﾅﾙﾎﾟｲﾝﾀ                                      */
/**********************************************************************/
#define MCS_EMPTY(p1) (((MCSIRB *)p1) -> qlink[0] == (MCSIRB *)p1)


/**********************************************************************/
/*  ＩＲＢ操作マクロ 9                                                */
/*  処理：コンテキストのスケジューラ管理域を初期化する                */
/*  引数： p1 = ｺﾝﾃｷｽﾄﾎﾟｲﾝﾀ                                           */
/**********************************************************************/
#define MCS_CINIT(p1) \
		  { ((MCSSWD *)p1)->ctxtlock = 0 ; \
			((MCSSWD *)p1)->retryqt[0] = \
					(MCSIRB *)((MCSSWD *)p1)->retryqt ; \
			((MCSSWD *)p1)->retryqt[1] = \
					(MCSIRB *)((MCSSWD *)p1)->retryqt ; \
			((MCSSWD *)p1)->dmy1[0] = 0 ; \
			((MCSSWD *)p1)->dmy1[1] = 0 ; \
			((MCSSWD *)p1)->dmy1[2] = 0 ; }

/**********************************************************************/
/*  ＩＲＢ操作マクロ 10                                               */
/*  処理：キューターミナル最終のＩＲＢをデキューし、ＩＲＢ            */
/*        ポインタをｐ２に設定する                                    */
/*  引数： p1 =    ｷｭｰﾀｰﾐﾅﾙﾎﾟｲﾝﾀ       p2 = IRBﾎﾟｲﾝﾀ                  */
/*        修正 ST4234 p2のcast「(MCSIRB*)」を除去                 S01 */
/*                    (MCS_TDEQ使用者のｺﾝﾊﾟｲﾙでwarningが出るため) S01 */
/*        修正 ST4577 void でｷｬｽﾄする                			  S03 */
/*                    (MCS_TDEQ使用者のｺﾝﾊﾟｲﾙでwarningが出るため) S03 */
/**********************************************************************/
#define MCS_TDEQ(p1,p2) {(p2) = (void *)(((MCSIRB *)p1) -> qlink[1]) ; \
						MCS_ADEQ(p2)}

/**********************************************************************/
/*  ＩＲＢ操作マクロ 11                                               */
/*  処理：キューターミナル任意のＩＲＢ(ｐ１)の次にキューイングされ 	  */
/*        ているＩＲＢポインタを返却する                        	  */
/*          ｷｭｰﾀｰﾐﾅﾙﾎﾟｲﾝﾀを指定した場合:先頭IRBﾎﾟｲﾝﾀ                  */
/*          最終IRBﾎﾟｲﾝﾀを指定した場合:ｷｭｰﾀｰﾐﾅﾙﾎﾟｲﾝﾀ 	      		  */
/*  引数： p1 = 任意IRBﾎﾟｲﾝﾀ										  */
/*  S02:1996.9.11 米倉 新規追加                                       */
/**********************************************************************/
#define MCS_NXTQ(p1) (((MCSIRB *)p1) -> qlink[0])
					
/**********************************************************************/
/*                    デバッグ用プリント文　                          */
/**********************************************************************/
#ifdef PRON
#define MCS_PRINT(p1,p2,p3,p4)	printf(p1,p2,p3,p4)
#else
#define MCS_PRINT(p1,p2,p3,p4) {}
#endif


