/****************************************************************************/
/* ﾌｧｲﾙ名　：　mbcconn.h   　												*/
/* 機能　　：  制御ステータス												*/
/*			   コンテキストテンプレート 									*/
/* 作成日　：  1993.12.15													*/
/* 更新日　：																*/
/****************************************************************************/

/**************************************/
/* 制御ステータス					  */
/**************************************/
#define  STSCINIT		 0				/* S300:初期状態					*/
#define  STSCSCON		 1				/* S301:ｺﾈｸｼｮﾝ設定中／CONNECT中 	*/
#define  STSCSDCA		 2				/* S302:ｺﾈｸｼｮﾝ設定中／DCONN･ABORT中 */
#define  STSCSDET		 3				/* S303:ｺﾈｸｼｮﾝ設定中／DETACH中		*/
#define  STSCOPEN		 4				/* S304:コネクション設定済み		*/
#define  STSCFREE		 5				/* S305:コネクション解放			*/
#define  STSCDDCA		 6				/* S306:回線DEACT中／DCONN･ABORT中	*/
#define  STSCDDET		 7				/* S307:回線DEACT中／DETACH中		*/
#define  STSCDTIM		 8				/* S308:回線DEACT中／ｲﾝﾀﾊﾞﾙﾀｲﾏ中	*/
#define  STSCDFRE		 9				/* S309:回線DEACT中／解放済み		*/
#define  STSCFDCA		10				/* S310:ｺﾈｸｼｮﾝ解放中／DCONN･ABORT中 */
#define  STSCFDET		11				/* S311:ｺﾈｸｼｮﾝ解放中／DETACH中		*/
#define  STSCFTIM		12				/* S312:ｺﾈｸｼｮﾝ解放中／ｲﾝﾀﾊﾞﾙﾀｲﾏ中	*/
#define  STSCADCA		13				/* S313:ｺﾈｸｼｮﾝｱﾎﾞｰﾄ中/DCONN･ABORT中 */
#define  STSCADET		14				/* S314:ｺﾈｸｼｮﾝｱﾎﾞｰﾄ中/DETACH中		*/
#define  STSCATIM		15				/* S315:ｺﾈｸｼｮﾝｱﾎﾞｰﾄ中/ｲﾝﾀﾊﾞﾙﾀｲﾏ中	*/
#define  STSCCDCA		16				/* S316:クローズ中／DCONN･ABORT中	*/
#define  STSCCDET		17				/* S317:クローズ中／DETACH中		*/
#define  STSCCTIM		18				/* S318:クローズ中／ｲﾝﾀﾊﾞﾙﾀｲﾏ中 	*/

/**************************************/
/* 制御フラグ定義					  */
/**************************************/
#define FLGCASYN	0x01				/* 非同期フラグ 					*/
#define FLGCFIN 	0x02				/* 相手送信終了フラグ				*/
#define FLGCERBF	0x04				/* 受信バッファ終了 				*/
#define FLGCOPTO	0x08				/* 緊急データオプションフラグ		*/
#define FLGCRCVO	0x10				/* 緊急データ受信フラグ 			*/
#define FLGCROOB	0x20				/* ＲＣＶＯＯＢフラグ				*/

#define FLGCNULL	0x00				/* フラグ（初期状態）				*/
/**************************************/
/* オプション設定要求退避域インデック */
/* ス								  */
/**************************************/
#define	OPTCNSVP 0						/* ｺﾈｸｼｮﾝ保存ｵﾌﾟｼｮﾝ設定要求ｲﾝﾃﾞｯｸｽ 	*/
#define	OPTROUTP 1						/* 経路選択ｵﾌﾟｼｮﾝ設定要求ｲﾝﾃﾞｯｸｽ	*/
#define	OPTOOBDP 2						/* 緊急ﾃﾞｰﾀｵﾌﾟｼｮﾝ設定要求ｲﾝﾃﾞｯｸｽ	*/
#define	OPTLINGP 3						/* ﾘﾝｶﾞｰｵﾌﾟｼｮﾝ設定要求ｲﾝﾃﾞｯｸｽ		*/
#define	OPTRBUFP 4						/* 受信ﾊﾞｯﾌｧｵﾌﾟｼｮﾝ設定要求ｲﾝﾃﾞｯｸｽ	*/
#define	OPTSBUFP 5						/* 送信ﾊﾞｯﾌｧｵﾌﾟｼｮﾝ設定要求ｲﾝﾃﾞｯｸｽ	*/
#define	MAXSOPTRQ 6						/* 設定可能なオプション数			*/

/**************************************/
/* コンテキストテンプレート 		  */
/**************************************/
typedef struct {
	long			chead[3];			/* スケジューラ管理域				*/
	char			status; 			/* 制御ステータス(コネクション制御) */
	unsigned char	flags;				/* 制御フラグ						*/
	unsigned short	lsno;				/* ＬＳ番号 						*/
	unsigned char	cntsyscl;			/* システムコール数 				*/
	unsigned char	cnttred;			/* 受信要求数						*/
	unsigned char	cntreadd;			/* 受信発行数						*/
	unsigned char	cntcedt;			/* 送信要求数						*/
	long			pathctxa;			/* 論理パス制御コンテキストアドレス */
	long			ripaddr;			/* リモートインターネットアドレス	*/
	short			rport;				/* リモートポート番号				*/
	short			end_conn;			/* コネクション終了要因 			*/
	XQLINK			ctxtqt; 			/* コネクション制御コンテキストＱＴ */
	long			connstap;			/* ｺﾈｸｼｮﾝ設定(ACT/LIS)要求退避域	*/
	long			connendp;			/* ｺﾈｸｼｮﾝ解放(ｱﾎﾞｰﾄ)要求退避域		*/
	long			receivqt[2];		/* 電文受信要求ＱＴ 				*/
	long			sendqt[2];			/* 電文送信要求ＱＴ 				*/
	long			rcvoobp;			/* 緊急データ受信要求退避域 		*/
	long			sendoobp;			/* 緊急データ送信要求退避域 		*/
	long			setoptp[MAXSOPTRQ];	/* ｵﾌﾟｼｮﾝ設定要求退避域				*/
	long			tiddetch;			/* DETACHｲﾝﾀｰﾊﾞﾙﾀｲﾏID				*/
}	MPCCMB;

/****************************************************************************/
/*																			*/
/* ＜マクロ名＞  MPCXADEQ													*/
/*																			*/
/* ＜機能概要＞  コネクションコンテキストＱＴから引き数２で指定したアドレス */
/*				 値のコネクション制御コンテキストをデキューする 			*/
/* ＜仮引数＞																*/
/*	   P1	     コネクションコンテキストＱＴポインタ						*/
/*	   P2	     コネクション制御コンテキストアドレス						*/
/****************************************************************************/
#define MPCXADEQ(P1, P2)													  \
{																			  \
	MPCCMB	*befocmb;					/* 前方向コンテキストアドレス		*/\
	MPCCMB	*nextcmb;					/* 後方向コンテキストアドレス		*/\
	befocmb = (MPCCMB *)((MPCCMB *)P2)->ctxtqt.xqlink[0];					  \
										/* 前にキューイングしているコンテキ */\
										/* ストアドレス取得 				*/\
	nextcmb = (MPCCMB *)((MPCCMB *)P2)->ctxtqt.xqlink[1];					  \
										/* 後にキューイングしているコンテキ */\
										/* ストアドレス取得 				*/\
	if( befocmb )						/* 前にキューイングしている場合 	*/\
	{																		  \
		befocmb->ctxtqt.xqlink[1] = (long)nextcmb;							  \
										/* 前にキューイングしているコンテキ	*/\
										/* ストと後にキューイングしているコ	*/\
										/* ンテキストを結合する				*/\
	}																		  \
	else								/* 前にキューイングしていない場合	*/\
	{																		  \
		P1.xqt[0] = (long)nextcmb;		/* コンテキストＱＴの先頭アドレスに	*/\
										/* 後ろにキューイングしているコンテ	*/\
										/* キストのアドレスを設定する		*/\
	}																		  \
	if( nextcmb )						/* 後にキューイングしている場合 	*/\
	{																		  \
		nextcmb->ctxtqt.xqlink[0] = (long)befocmb;							  \
										/* コンテキストＱＴに前にキューイン	*/\
										/* グしているコンテキストアドレスを	*/\
										/* 後にキューイングしているコンテキ	*/\
										/* ストの前方向コンテキストアドレス	*/\
										/* に設定する						*/\
	}																		  \
	else								/* 後にキューイングしていない場合	*/\
	{																		  \
		P1.xqt[1] = (long)befocmb;		/* コンテキストＱＴの最終アドレスに	*/\
										/* 前にキューイングしているコンテキ	*/\
										/* ストのアドレスを設定する			*/\
	}																		  \
}

/****************************************************************************/
/*																			*/
/* ＜マクロ名＞  MPCXFIND													*/
/*																			*/
/* ＜機能概要＞  コネクションコンテキストＱＴに引き数２で指定したアドレス値 */
/*				 のコネクション制御コンテキストを検索する					*/
/* ＜仮引数＞																*/
/*	   P1	     コネクションコンテキストＱＴポインタ						*/
/*	   P2	     コネクション制御コンテキストアドレス						*/
/****************************************************************************/
#define MPCXFIND(P1, P2)													  \
{																			  \
	MPCCMB	*wctxtpt;					/* コネクション制御コンテキストア  	*/\
										/* ドレス							*/\
	wctxtpt = (MPCCMB *)P1.xqt[0];		/* コンテキストＱＴの先頭アドレス取	*/\
										/* 得								*/\
	while( wctxtpt )					/* コンテキストアドレス≠０			*/\
	{																		  \
		if( wctxtpt == (MPCCMB *)P2 )	/* コンテキストアドレスが一致する場	*/\
										/* 合						  		*/\
		{																	  \
			break;															  \
		}																	  \
		wctxtpt = (MPCCMB *)((MPCCMB *)wctxtpt)->ctxtqt.xqlink[1];			  \
										/* 次にキューイングしているコンテキ	*/\
										/* ストアドレスを設定する			*/\
	}																		  \
	P2 = wctxtpt;						/* 検索した結果（コンテキストアドレ	*/\
										/* ス）を設定する					*/\
}

/****************************************************************************/
/*																			*/
/* ＜マクロ名＞  MPCXFRST													*/
/*																			*/
/* ＜機能概要＞  コネクションコンテキストＱＴの先頭にキューイングしている	*/
/*				 コネクション制御コンテキストのアドレスを取得する			*/
/* ＜仮引数＞																*/
/*	   P1	     コネクションコンテキストＱＴポインタ						*/
/*	   P2	     コネクション制御コンテキストアドレスの格納域				*/
/****************************************************************************/
#define MPCXFRST(P1, P2)				/* コンテキストサーチ（先頭）		*/\
{																			  \
	P2 = (MPCCMB *)P1.xqt[0];			/* キューの先頭に設定されているコネ	*/\
										/* クション制御コンテキストアドレス	*/\
										/* を取り出す						*/\
}

/****************************************************************************/
/*																			*/
/* ＜マクロ名＞  MPCXHDEQ													*/
/*																			*/
/* ＜機能概要＞  コネクションコンテキストＱＴの先頭からコネクション制御コン */
/*				 テキストをデキュ−する 									*/
/* ＜仮引数＞																*/
/*	   P1	     コネクションコンテキストＱＴポインタ						*/
/*	   P2	     コネクション制御コンテキストアドレス						*/
/****************************************************************************/
#define MPCXHDEQ(P1, P2)				/* コンテキストデキュー（先頭） 	*/\
{																			  \
	MPCCMB	*wctxtpt;					/* コネクション制御コンテキストアド	*/\
										/* レスアドレス						*/\
	wctxtpt=(MPCCMB *)P1.xqt[0];		/* キューの先頭に設定されているコネ	*/\
										/* クション制御コンテキストアドレス	*/\
										/* を取り出す						*/\
	if( wctxtpt )						/* コンテキストＱＴにキューイングし	*/\
										/* ている場合						*/\
	{																		  \
		if( ((MPCCMB *)wctxtpt)->ctxtqt.xqlink[1] ) 						  \
										/* 次にキューイングしているコンテキ	*/\
										/* ストがある場合					*/\
		{																	  \
			P1.xqt[0] = ((MPCCMB *)wctxtpt)->ctxtqt.xqlink[1] ; 			  \
										/* コンテキストＱＴに２番目にキュー	*/\
										/* イングしていたコンテキストをコン	*/\
										/* テキストＱＴの先頭に設定する		*/\
			((MPCCMB *)P1.xqt[0])->ctxtqt.xqlink[0] = 0; 					  \
										/* コンテキストＱＴの先頭アドレスが	*/\
										/* 指すコンテキストの前方向アドレス	*/\
										/* を０（キューの先頭）を設定する	*/\
		}																	  \
		else							/* 次にキューイングしているコンテキ	*/\
										/* ストがない場合					*/\
		{																	  \
			P1.xqt[0] = 0 ; 			/* コンテキストＱＴの先頭アドレスク	*/\
										/* リア								*/\
			P1.xqt[1] = 0 ; 			/* コンテキストＱＴの最終アドレスク	*/\
										/* リア								*/\
		}																	  \
	}																		  \
	P2 = (MPCCMB *)wctxtpt; 			/* デキューした結果（コンテキストア	*/\
										/* ドレス）を設定					*/\
}

/****************************************************************************/
/*																			*/
/* ＜マクロ名＞  MPCXNEXT													*/
/*																			*/
/* ＜機能概要＞  コネクションコンテキストＱＴに次にキューイングしている 	*/
/*				 コネクション制御コンテキストのアドレスを取得する			*/
/* ＜仮引数＞																*/
/*	   P1	     コネクション制御コンテキスト								*/
/****************************************************************************/
#define MPCXNEXT(P1)					/* コンテキストサーチ（順次）		*/\
{																			  \
	P1=((MPCCMB *)P1)->ctxtqt.xqlink[1];/* 次にキューイングしているコネクシ	*/\
										/* ョン制御コンテキストアドレスを設	*/\
										/* 定する							*/\
}

/****************************************************************************/
/*																			*/
/* ＜マクロ名＞  MPCXQINI													*/
/*																			*/
/* ＜機能概要＞  コネクション制御コンテキストのキューターミナルを初期化する */
/* ＜仮引数＞																*/
/*	   P1	     コネクションコンテキストキューターミナルポインタ			*/
/****************************************************************************/
#define MPCXQINI(P1)					/* コネクション制御コンテキストキュ */\
										/* ーターミナル初期化				*/\
{																			  \
	((XQT *)P1)->xqt[0] = 0L;			/* キューの先頭をクリア				*/\
	((XQT *)P1)->xqt[1] = 0L;			/* キューの最後尾をクリア			*/\
}

/****************************************************************************/
/*																			*/
/* ＜マクロ名＞  MPCXTENQ													*/
/*																			*/
/* ＜機能概要＞  コネクションコンテキストＱＴに引き数２で指定したアドレス値 */
/*				 のコネクション制御コンテキストを追加（最後尾にキューイング */
/*				 ）する 													*/
/* ＜仮引数＞																*/
/*	   P1	     コネクションコンテキストＱＴポインタ						*/
/*	   P2	     コネクション制御コンテキストアドレス						*/
/****************************************************************************/
#define MPCXTENQ(P1, P2)				/* コンテキストキューイング 		*/\
{																			  \
	MPCCMB	*bottcmb;					/* コンテキストＱＴに最後にキューイ	*/\
										/* ングしているコンテキストのアドレ	*/\
										/* ス								*/\
	bottcmb=(MPCCMB *)P1.xqt[1];		/* コンテキストＱＴの最終アドレス設	*/\
										/* 定								*/\
	if( bottcmb )						/* コンテキストＱＴにキューイングし	*/\
										/* ている場合						*/\
	{																		  \
		((MPCCMB *)bottcmb)->ctxtqt.xqlink[1] = (long)P2;					  \
										/* コンテキストＱＴの最終アドレスの	*/\
										/* コンテキストの後方向アドレスにキ	*/\
										/* ューイングするコンテキストのアド	*/\
										/* レスを設定する					*/\
		((MPCCMB *)P2)->ctxtqt.xqlink[0] = (long)bottcmb;					  \
										/* キューイングするコンテキストの前	*/\
										/* 方向アドレスに今までコンテキスト	*/\
										/* ＱＴの最後にキューイングしていた	*/\
										/* コンテキストのアドレスを設定する	*/\
	}																		  \
	else								/* コンテキストＱＴにキューイングし	*/\
										/* ていない 						*/\
	{																		  \
		P1.xqt[0] = (long)P2;			/* コンテキストＱＴの先頭アドレスに	*/\
										/* キューイングするコンテキストのア	*/\
										/* ドレスを設定する	  				*/\
		((MPCCMB *)P2)->ctxtqt.xqlink[0] = 0;								  \
										/* キューイングするコンテキストの前	*/\
										/* 方向アドレスに０（キューの先頭）	*/\
										/* を設定							*/\
	}																		  \
	P1.xqt[1] = (long)P2 ;				/* コンテキストＱＴの最終アドレスに	*/\
										/* キューイングするコンテキストのア	*/\
										/* ドレスを設定する					*/\
	((MPCCMB *)P2)->ctxtqt.xqlink[1] = 0;									  \
										/* キューイングするコンテキストの後	*/\
										/* 方向アドレスに０（キューの最終）	*/\
										/* を設定							*/\
}

